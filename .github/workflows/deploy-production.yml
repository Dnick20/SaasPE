name: Deploy to Production

on:
  push:
    branches: [ main ]
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: saaspe_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: SaasPE-Backend/package-lock.json

      - name: Install backend dependencies
        working-directory: ./SaasPE-Backend
        run: npm ci

      - name: Generate Prisma Client
        working-directory: ./SaasPE-Backend
        run: npx prisma generate

      - name: Run database migrations
        working-directory: ./SaasPE-Backend
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/saaspe_test
        run: npx prisma migrate deploy

      - name: Run unit tests
        working-directory: ./SaasPE-Backend
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/saaspe_test
          REDIS_URL: redis://localhost:6379
          JWT_SECRET: test-secret-key
        run: npm test

      - name: Run E2E tests
        working-directory: ./SaasPE-Backend
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/saaspe_test
          REDIS_URL: redis://localhost:6379
          JWT_SECRET: test-secret-key
        run: npm run test:e2e

  build-backend:
    name: Build Backend Docker Image
    runs-on: ubuntu-latest
    needs: [test]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: saaspe/backend
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,format=long
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push backend
        uses: docker/build-push-action@v5
        with:
          context: ./SaasPE-Backend
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILD_DATE=${{ github.event.head_commit.timestamp }}
            VCS_REF=${{ github.sha }}
            VERSION=${{ github.ref_name }}

  build-frontend:
    name: Build Frontend Docker Image
    runs-on: ubuntu-latest
    needs: [test]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: saaspe/frontend
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,format=long
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push frontend
        uses: docker/build-push-action@v5
        with:
          context: ./saaspe-web
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            NEXT_PUBLIC_API_URL=${{ secrets.PRODUCTION_API_URL }}
            BUILD_DATE=${{ github.event.head_commit.timestamp }}
            VCS_REF=${{ github.sha }}

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-backend, build-frontend]
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')
    environment:
      name: production
      url: https://app.saaspe.com

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.PRODUCTION_SSH_KEY }}

      - name: Add production server to known hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.PRODUCTION_SERVER_IP }} >> ~/.ssh/known_hosts

      - name: Deploy to production server
        run: |
          ssh ${{ secrets.PRODUCTION_SSH_USER }}@${{ secrets.PRODUCTION_SERVER_IP }} << 'EOF'
            set -e

            echo "🚀 Starting deployment..."

            # Navigate to application directory
            cd /opt/saaspe

            # Pull latest changes
            git fetch origin
            git checkout main
            git pull origin main

            # Pull latest Docker images
            echo "📦 Pulling Docker images..."
            docker-compose -f docker-compose.production.yml pull

            # Run database migrations
            echo "🔄 Running database migrations..."
            docker-compose -f docker-compose.production.yml run --rm backend npx prisma migrate deploy

            # Restart services with zero downtime
            echo "♻️  Restarting services..."
            docker-compose -f docker-compose.production.yml up -d --no-deps --build

            # Wait for health checks
            echo "🏥 Waiting for health checks..."
            sleep 30

            # Verify deployment
            echo "✅ Verifying deployment..."
            docker-compose -f docker-compose.production.yml ps

            # Clean up old images
            echo "🧹 Cleaning up..."
            docker image prune -f

            echo "✨ Deployment completed successfully!"
          EOF

      - name: Run smoke tests
        run: |
          # Wait for application to be fully up
          sleep 10

          # Test backend health endpoint
          curl --fail https://api.saaspe.com/health || exit 1

          # Test frontend
          curl --fail https://app.saaspe.com || exit 1

          echo "✅ Smoke tests passed"

      - name: Notify Sentry of deployment
        uses: getsentry/action-release@v1
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_ORG: ${{ secrets.SENTRY_ORG }}
          SENTRY_PROJECT: saaspe-backend
        with:
          environment: production
          version: ${{ github.sha }}

      - name: Create deployment record
        run: |
          curl -X POST https://api.saaspe.com/api/v1/internal/deployments \
            -H "Authorization: Bearer ${{ secrets.INTERNAL_API_KEY }}" \
            -H "Content-Type: application/json" \
            -d '{
              "version": "${{ github.ref_name }}",
              "sha": "${{ github.sha }}",
              "environment": "production",
              "deployedBy": "${{ github.actor }}",
              "timestamp": "${{ github.event.head_commit.timestamp }}"
            }'

      - name: Send Slack notification
        if: always()
        uses: slackapi/slack-github-action@v1
        with:
          payload: |
            {
              "text": "${{ job.status == 'success' && '✅' || '❌' }} Production Deployment ${{ job.status }}",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*Production Deployment ${{ job.status }}*\n\nVersion: `${{ github.ref_name }}`\nCommit: `${{ github.sha }}`\nDeployed by: ${{ github.actor }}"
                  }
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  rollback:
    name: Rollback Production
    runs-on: ubuntu-latest
    if: failure() && github.ref == 'refs/heads/main'
    needs: [deploy-production]

    steps:
      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.PRODUCTION_SSH_KEY }}

      - name: Rollback to previous version
        run: |
          ssh ${{ secrets.PRODUCTION_SSH_USER }}@${{ secrets.PRODUCTION_SERVER_IP }} << 'EOF'
            set -e

            echo "⚠️  Initiating rollback..."

            cd /opt/saaspe

            # Rollback Docker containers to previous tag
            docker-compose -f docker-compose.production.yml down
            docker-compose -f docker-compose.production.yml pull --ignore-pull-failures
            docker-compose -f docker-compose.production.yml up -d

            echo "✅ Rollback completed"
          EOF

      - name: Notify rollback
        uses: slackapi/slack-github-action@v1
        with:
          payload: |
            {
              "text": "⚠️ Production deployment failed - rollback initiated",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*Deployment Rollback*\n\n Failed commit: `${{ github.sha }}`\nRolled back by: GitHub Actions"
                  }
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
